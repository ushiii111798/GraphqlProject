input{
    jdbc {
        tags => ["board"]
        jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_connection_string => "jdbc:mysql://mysql:3306/mydocker09"
        jdbc_user => "root"
        jdbc_password => "1234"
        schedule => "*/10 * * * * *"
        use_column_value => "true"
        lowercase_column_names => false # 대소문자 구분하게 하기.
        tracking_column => "tk_updatedat"
        tracking_column_type => "numeric"
        last_run_metadata_path => "./timestamp_board.txt"
        statement => "select b.id, b.title, b.content, b.createdAt, b.updatedAt, b.isSecret, 
        b.boardListsId, bl.title as boardList_title, b.usersId, u.loginId, u.name, u.birth, u.sex, u.grade, u.pointTotal, 
        u.email, u.isAgreedEmail, u.assignedAt, u.updatedAt as user_updatedAt, unix_timestamp(b.updatedAt) as tk_updatedat 
        from board b
        inner join board_list bl on b.boardListsId = bl.id
        inner join user u on b.usersId = u.id
        where b.deletedAt is null 
        and unix_timestamp(b.updatedAt) 
        > :sql_last_value order by b.updatedAt asc"
        # statement =>"select id, title from board where unix_timestamp(updatedAt) >:sql_last_value order by updatedAt asc"
    }
    jdbc {
        tags => ["product"]
        jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_connection_string => "jdbc:mysql://mysql:3306/mydocker09"
        jdbc_user => "root"
        jdbc_password => "1234"
        schedule => "*/10 * * * * *"
        use_column_value => "true"
        lowercase_column_names => false # 대소문자 구분하게 하기.
        tracking_column => "tk_updatedat"
        tracking_column_type => "numeric"
        last_run_metadata_path => "./timestamp_product.txt"
        statement => "select p.id, p.name, p.price, p.deliveryPrice, p.maxQ, p.detailText, p.stock, 
        p.createdAt, p.updatedAt, p.productCategoriesId, pc.category, unix_timestamp(p.updatedAt) as tk_updatedat 
        from product p 
        inner join `product_category` pc on p.productCategoriesId = pc.id 
        where p.deletedAt is null 
        and unix_timestamp(p.updatedAt) 
        > :sql_last_value order by p.updatedAt asc"
        # statement =>"select id, title from board where unix_timestamp(updatedAt) >:sql_last_value order by updatedAt asc"
    }
}

filter{
    mutate{
        remove_field => ["tk_updatedat", "tk_createdat"]
        copy => { "id" => "[@metadata][_id]" }
    }
}

output {
    if "product" in [tags] {
        elasticsearch {
            hosts => "elasticsearch:9200"
            index => "product"
            manage_template => true
            template => "/usr/share/logstash/template-product.json"
            template_name => "template_product"
            template_overwrite => true
            document_id => "%{[@metadata][_id]}"
        }
    }
    if "board" in [tags] {
        elasticsearch {
            hosts => "elasticsearch:9200"
            index => "board"
            manage_template => true
            template => "/usr/share/logstash/template-board.json"
            template_name => "template_board"
            template_overwrite => true
            document_id => "%{[@metadata][_id]}"
        }
    }
}